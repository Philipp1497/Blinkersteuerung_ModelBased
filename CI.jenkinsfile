pipeline {
    agent any
    stages {
        stage ('Clear bin directory') {
            steps{
                bat """
                    del /q Target\\bin\\*.* 2>NUL
					del /q Tools\\ReqCoverage\\log.txt 2>NUL
                """
            }
        }
        stage ('Build') {
            steps{
                bat "Tools\\make\\start.bat"
                 // bat "make\\start.bat"
            }
        }
		stage ('run ceedling tests') {
			steps{
				script {
                    try {
                        bat """
							ceedling gcov:all utils:gcov >> Tools\\ReqCoverage\\log.txt 2>&1
						"""
                    }
                    catch (exc) {
                        echo 'Testing failed!'
                        currentBuild.result = 'UNSTABLE'
                    }
                }
			}
		}
		stage ('run static code analysis'){
            steps{
                bat """
                    xcopy "Source\\src\\*.*" "Tools\\splint" /y
                    cd Tools\\splint
					del log.txt 2>NUL
                    start.bat
                """
            }
        }
		stage ('calculate Requirements Coverage') {
			steps{
				bat """
                    cd Tools\\ReqCoverage
                    del output\\output.txt
                    %PYTHON% main.py
                """
				archiveArtifacts artifacts: 'Tools\\ReqCoverage\\log.txt', onlyIfSuccessful: true
                archiveArtifacts artifacts: 'Tools\\ReqCoverage\\output\\output.txt', onlyIfSuccessful: true
			}
		}
        stage ('archive Artifacts'){
            steps{
                archiveArtifacts artifacts: 'Target\\bin\\*.*', onlyIfSuccessful: true
				archiveArtifacts artifacts: 'Tools\\splint\\log.txt', onlyIfSuccessful: true
				archiveArtifacts artifacts: 'build\\artifacts\\gcov\\*.*', onlyIfSuccessful: true
            }
        }
		stage ('results'){
			steps{
				xunit tools: [Custom(customXSL: 'unity.xsl',
							  pattern: 'build\\artifacts\\gcov\\report.xml',
							  skipNoTestFiles: false,
							  stopProcessingIfError: true)]
				cobertura coberturaReportFile: 'build\\artifacts\\gcov\\GcovCoverageCobertura.xml'
			}
		}
    }
}


